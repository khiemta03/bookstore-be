// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: publisher.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addNewPublisher = `-- name: AddNewPublisher :one
INSERT INTO
    "PUBLISHERS" (
        name,
        address
    )
VALUES
    ($1, $2) RETURNING id, name, address, created_at
`

type AddNewPublisherParams struct {
	Name    string         `json:"name"`
	Address sql.NullString `json:"address"`
}

func (q *Queries) AddNewPublisher(ctx context.Context, arg AddNewPublisherParams) (PUBLISHER, error) {
	row := q.db.QueryRowContext(ctx, addNewPublisher, arg.Name, arg.Address)
	var i PUBLISHER
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getPublisher = `-- name: GetPublisher :one
SELECT
    id, name, address, created_at
FROM
    "PUBLISHERS"
WHERE id = $1
`

func (q *Queries) GetPublisher(ctx context.Context, id uuid.UUID) (PUBLISHER, error) {
	row := q.db.QueryRowContext(ctx, getPublisher, id)
	var i PUBLISHER
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
