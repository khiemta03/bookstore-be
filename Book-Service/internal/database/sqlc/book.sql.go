// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: book.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addBookAuthor = `-- name: AddBookAuthor :one
INSERT INTO
    "BOOK_AUTHORS" (
        book_id,
        author_id
    )
VALUES
    ($1, $2) RETURNING book_id, author_id, created_at
`

type AddBookAuthorParams struct {
	BookID   uuid.UUID `json:"book_id"`
	AuthorID uuid.UUID `json:"author_id"`
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) (BOOKAUTHOR, error) {
	row := q.db.QueryRowContext(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	var i BOOKAUTHOR
	err := row.Scan(&i.BookID, &i.AuthorID, &i.CreatedAt)
	return i, err
}

const addNewBook = `-- name: AddNewBook :one
INSERT INTO
    "BOOKS" (
        title,
        full_title,
        publisher,
        publication_date,
        isbn,
        description,
        price,
        stock_quantity,
        front_cover_image,
        back_cover_image
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, title, full_title, publisher, publication_date, isbn, description, price, stock_quantity, front_cover_image, back_cover_image, created_at
`

type AddNewBookParams struct {
	Title           string         `json:"title"`
	FullTitle       string         `json:"full_title"`
	Publisher       uuid.UUID      `json:"publisher"`
	PublicationDate time.Time      `json:"publication_date"`
	Isbn            string         `json:"isbn"`
	Description     sql.NullString `json:"description"`
	Price           float64        `json:"price"`
	StockQuantity   int32          `json:"stock_quantity"`
	FrontCoverImage sql.NullString `json:"front_cover_image"`
	BackCoverImage  sql.NullString `json:"back_cover_image"`
}

func (q *Queries) AddNewBook(ctx context.Context, arg AddNewBookParams) (BOOK, error) {
	row := q.db.QueryRowContext(ctx, addNewBook,
		arg.Title,
		arg.FullTitle,
		arg.Publisher,
		arg.PublicationDate,
		arg.Isbn,
		arg.Description,
		arg.Price,
		arg.StockQuantity,
		arg.FrontCoverImage,
		arg.BackCoverImage,
	)
	var i BOOK
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.FullTitle,
		&i.Publisher,
		&i.PublicationDate,
		&i.Isbn,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.FrontCoverImage,
		&i.BackCoverImage,
		&i.CreatedAt,
	)
	return i, err
}

const decreaseStockQuantity = `-- name: DecreaseStockQuantity :exec
UPDATE
    "BOOKS"
SET
    stock_quantity = stock_quantity - $2
WHERE
    id = $1
`

type DecreaseStockQuantityParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) DecreaseStockQuantity(ctx context.Context, arg DecreaseStockQuantityParams) error {
	_, err := q.db.ExecContext(ctx, decreaseStockQuantity, arg.ID, arg.Quantity)
	return err
}

const getBook = `-- name: GetBook :one
SELECT
    id, title, full_title, publisher, publication_date, isbn, description, price, stock_quantity, front_cover_image, back_cover_image, created_at
FROM
    "BOOKS"
WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (BOOK, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i BOOK
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.FullTitle,
		&i.Publisher,
		&i.PublicationDate,
		&i.Isbn,
		&i.Description,
		&i.Price,
		&i.StockQuantity,
		&i.FrontCoverImage,
		&i.BackCoverImage,
		&i.CreatedAt,
	)
	return i, err
}

const getBookAuthors = `-- name: GetBookAuthors :many
SELECT
    book_id, author_id, created_at
FROM
    "BOOK_AUTHORS"
WHERE book_id = $1
`

func (q *Queries) GetBookAuthors(ctx context.Context, bookID uuid.UUID) ([]BOOKAUTHOR, error) {
	rows, err := q.db.QueryContext(ctx, getBookAuthors, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BOOKAUTHOR
	for rows.Next() {
		var i BOOKAUTHOR
		if err := rows.Scan(&i.BookID, &i.AuthorID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooks = `-- name: ListBooks :many
SELECT
    id, title, full_title, publisher, publication_date, isbn, description, price, stock_quantity, front_cover_image, back_cover_image, created_at
FROM
    "BOOKS"
LIMIT $1 OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]BOOK, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BOOK
	for rows.Next() {
		var i BOOK
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.FullTitle,
			&i.Publisher,
			&i.PublicationDate,
			&i.Isbn,
			&i.Description,
			&i.Price,
			&i.StockQuantity,
			&i.FrontCoverImage,
			&i.BackCoverImage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE
    "BOOKS"
SET
    title               = COALESCE($2, title),
    full_title          = COALESCE($3, full_title), 
    publisher           = COALESCE($4, publisher),
    publication_date    = COALESCE($5, publication_date),
    isbn                = COALESCE($6, isbn),
    description         = COALESCE($7, description),
    price               = COALESCE($8, price),
    stock_quantity      = COALESCE($9, stock_quantity),
    front_cover_image   = COALESCE($10, front_cover_image),
    back_cover_image    = COALESCE($11, back_cover_image)
WHERE
    id = $1
`

type UpdateBookParams struct {
	ID              uuid.UUID      `json:"id"`
	Title           string         `json:"title"`
	FullTitle       string         `json:"full_title"`
	Publisher       uuid.UUID      `json:"publisher"`
	PublicationDate time.Time      `json:"publication_date"`
	Isbn            string         `json:"isbn"`
	Description     sql.NullString `json:"description"`
	Price           float64        `json:"price"`
	StockQuantity   int32          `json:"stock_quantity"`
	FrontCoverImage sql.NullString `json:"front_cover_image"`
	BackCoverImage  sql.NullString `json:"back_cover_image"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.FullTitle,
		arg.Publisher,
		arg.PublicationDate,
		arg.Isbn,
		arg.Description,
		arg.Price,
		arg.StockQuantity,
		arg.FrontCoverImage,
		arg.BackCoverImage,
	)
	return err
}
