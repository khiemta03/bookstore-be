// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: token.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO
    "ACCESS_TOKEN" (
        access_token_id,
        session_id,
        access_token_value,
        expires_at
    )
VALUES
    ($1, $2, $3, $4) RETURNING access_token_id, session_id, access_token_value, expires_at, created_at
`

type CreateAccessTokenParams struct {
	AccessTokenID    uuid.UUID `json:"access_token_id"`
	SessionID        uuid.UUID `json:"session_id"`
	AccessTokenValue string    `json:"access_token_value"`
	ExpiresAt        time.Time `json:"expires_at"`
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (ACCESSTOKEN, error) {
	row := q.db.QueryRowContext(ctx, createAccessToken,
		arg.AccessTokenID,
		arg.SessionID,
		arg.AccessTokenValue,
		arg.ExpiresAt,
	)
	var i ACCESSTOKEN
	err := row.Scan(
		&i.AccessTokenID,
		&i.SessionID,
		&i.AccessTokenValue,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccessToken = `-- name: GetAccessToken :one
SELECT
    access_token_id, session_id, access_token_value, expires_at, created_at
FROM
    "ACCESS_TOKEN"
WHERE "access_token_id" = $1
`

func (q *Queries) GetAccessToken(ctx context.Context, accessTokenID uuid.UUID) (ACCESSTOKEN, error) {
	row := q.db.QueryRowContext(ctx, getAccessToken, accessTokenID)
	var i ACCESSTOKEN
	err := row.Scan(
		&i.AccessTokenID,
		&i.SessionID,
		&i.AccessTokenValue,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
