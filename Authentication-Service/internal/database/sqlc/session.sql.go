// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO
    "SESSIONS" (
        session_id,
        user_id,
        refresh_token,
        user_agent,
        client_ip,
        expires_at
    )
VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING session_id, user_id, refresh_token, user_agent, client_ip, status, expires_at, created_at
`

type CreateSessionParams struct {
	SessionID    uuid.UUID `json:"session_id"`
	UserID       string    `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (SESSION, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i SESSION
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.Status,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT
    session_id, user_id, refresh_token, user_agent, client_ip, status, expires_at, created_at
FROM
    "SESSIONS"
WHERE "session_id" = $1
`

func (q *Queries) GetSession(ctx context.Context, sessionID uuid.UUID) (SESSION, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i SESSION
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.Status,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
