// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/khiemta03/bookstore-be/order-service/internal/database/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/khiemta03/bookstore-be/order-service/internal/database/sqlc"
	ce "github.com/khiemta03/bookstore-be/order-service/internal/error"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddNewDiscount mocks base method.
func (m *MockStore) AddNewDiscount(arg0 context.Context, arg1 db.AddNewDiscountParams) (db.DISCOUNT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.DISCOUNT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewDiscount indicates an expected call of AddNewDiscount.
func (mr *MockStoreMockRecorder) AddNewDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewDiscount", reflect.TypeOf((*MockStore)(nil).AddNewDiscount), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.ORDER, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.ORDER)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderDetail mocks base method.
func (m *MockStore) CreateOrderDetail(arg0 context.Context, arg1 db.CreateOrderDetailParams) (db.ORDERDETAIL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(db.ORDERDETAIL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderDetail indicates an expected call of CreateOrderDetail.
func (mr *MockStoreMockRecorder) CreateOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderDetail", reflect.TypeOf((*MockStore)(nil).CreateOrderDetail), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.CreateOrderTxParams) (db.CreateOrderTxResult, ce.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateOrderTxResult)
	ret1, _ := ret[1].(ce.CustomError)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// CreateShoppingCartItem mocks base method.
func (m *MockStore) CreateShoppingCartItem(arg0 context.Context, arg1 db.CreateShoppingCartItemParams) (db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingCartItem indicates an expected call of CreateShoppingCartItem.
func (mr *MockStoreMockRecorder) CreateShoppingCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCartItem", reflect.TypeOf((*MockStore)(nil).CreateShoppingCartItem), arg0, arg1)
}

// GetDiscount mocks base method.
func (m *MockStore) GetDiscount(arg0 context.Context, arg1 uuid.UUID) (db.DISCOUNT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.DISCOUNT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscount indicates an expected call of GetDiscount.
func (mr *MockStoreMockRecorder) GetDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscount", reflect.TypeOf((*MockStore)(nil).GetDiscount), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 uuid.UUID) (db.GetOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.GetOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetOrderDetail mocks base method.
func (m *MockStore) GetOrderDetail(arg0 context.Context, arg1 db.GetOrderDetailParams) (db.ORDERDETAIL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(db.ORDERDETAIL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockStoreMockRecorder) GetOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockStore)(nil).GetOrderDetail), arg0, arg1)
}

// GetShoppingCartItemByUser mocks base method.
func (m *MockStore) GetShoppingCartItemByUser(arg0 context.Context, arg1 db.GetShoppingCartItemByUserParams) (db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartItemByUser", arg0, arg1)
	ret0, _ := ret[0].(db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartItemByUser indicates an expected call of GetShoppingCartItemByUser.
func (mr *MockStoreMockRecorder) GetShoppingCartItemByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartItemByUser", reflect.TypeOf((*MockStore)(nil).GetShoppingCartItemByUser), arg0, arg1)
}

// GetShoppingCartItemByUserForUpdate mocks base method.
func (m *MockStore) GetShoppingCartItemByUserForUpdate(arg0 context.Context, arg1 db.GetShoppingCartItemByUserForUpdateParams) (db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartItemByUserForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartItemByUserForUpdate indicates an expected call of GetShoppingCartItemByUserForUpdate.
func (mr *MockStoreMockRecorder) GetShoppingCartItemByUserForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartItemByUserForUpdate", reflect.TypeOf((*MockStore)(nil).GetShoppingCartItemByUserForUpdate), arg0, arg1)
}

// ListDiscounts mocks base method.
func (m *MockStore) ListDiscounts(arg0 context.Context, arg1 db.ListDiscountsParams) ([]db.DISCOUNT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscounts", arg0, arg1)
	ret0, _ := ret[0].([]db.DISCOUNT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscounts indicates an expected call of ListDiscounts.
func (mr *MockStoreMockRecorder) ListDiscounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscounts", reflect.TypeOf((*MockStore)(nil).ListDiscounts), arg0, arg1)
}

// ListOrderDetails mocks base method.
func (m *MockStore) ListOrderDetails(arg0 context.Context, arg1 db.ListOrderDetailsParams) ([]db.ORDERDETAIL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderDetails", arg0, arg1)
	ret0, _ := ret[0].([]db.ORDERDETAIL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderDetails indicates an expected call of ListOrderDetails.
func (mr *MockStoreMockRecorder) ListOrderDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderDetails", reflect.TypeOf((*MockStore)(nil).ListOrderDetails), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(arg0 context.Context, arg1 db.ListOrdersParams) ([]db.ListOrdersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.ListOrdersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), arg0, arg1)
}

// ListShoppingCartItemsByUser mocks base method.
func (m *MockStore) ListShoppingCartItemsByUser(arg0 context.Context, arg1 db.ListShoppingCartItemsByUserParams) ([]db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCartItemsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCartItemsByUser indicates an expected call of ListShoppingCartItemsByUser.
func (mr *MockStoreMockRecorder) ListShoppingCartItemsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCartItemsByUser", reflect.TypeOf((*MockStore)(nil).ListShoppingCartItemsByUser), arg0, arg1)
}

// RemoveItemTx mocks base method.
func (m *MockStore) RemoveItemTx(arg0 context.Context, arg1 db.RemoveItemTxResult) (db.SHOPPINGCARTITEM, ce.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemTx", arg0, arg1)
	ret0, _ := ret[0].(db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(ce.CustomError)
	return ret0, ret1
}

// RemoveItemTx indicates an expected call of RemoveItemTx.
func (mr *MockStoreMockRecorder) RemoveItemTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemTx", reflect.TypeOf((*MockStore)(nil).RemoveItemTx), arg0, arg1)
}

// UpdateShoppingCartItemListStatus mocks base method.
func (m *MockStore) UpdateShoppingCartItemListStatus(arg0 context.Context, arg1 db.UpdateShoppingCartItemListStatusParams) ([]db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingCartItemListStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingCartItemListStatus indicates an expected call of UpdateShoppingCartItemListStatus.
func (mr *MockStoreMockRecorder) UpdateShoppingCartItemListStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingCartItemListStatus", reflect.TypeOf((*MockStore)(nil).UpdateShoppingCartItemListStatus), arg0, arg1)
}

// UpdateShoppingCartItemQuantity mocks base method.
func (m *MockStore) UpdateShoppingCartItemQuantity(arg0 context.Context, arg1 db.UpdateShoppingCartItemQuantityParams) (db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingCartItemQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingCartItemQuantity indicates an expected call of UpdateShoppingCartItemQuantity.
func (mr *MockStoreMockRecorder) UpdateShoppingCartItemQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingCartItemQuantity", reflect.TypeOf((*MockStore)(nil).UpdateShoppingCartItemQuantity), arg0, arg1)
}

// UpdateShoppingCartItemStatus mocks base method.
func (m *MockStore) UpdateShoppingCartItemStatus(arg0 context.Context, arg1 db.UpdateShoppingCartItemStatusParams) (db.SHOPPINGCARTITEM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingCartItemStatus", arg0, arg1)
	ret0, _ := ret[0].(db.SHOPPINGCARTITEM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingCartItemStatus indicates an expected call of UpdateShoppingCartItemStatus.
func (mr *MockStoreMockRecorder) UpdateShoppingCartItemStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingCartItemStatus", reflect.TypeOf((*MockStore)(nil).UpdateShoppingCartItemStatus), arg0, arg1)
}
