// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO
    "ORDERS" (
        user_id,
        shipping_address,
        discount
    )
VALUES
    ($1, $2, $3) RETURNING order_id, user_id, order_at, status, discount, shipping_address
`

type CreateOrderParams struct {
	UserID          string        `json:"user_id"`
	ShippingAddress string        `json:"shipping_address"`
	Discount        uuid.NullUUID `json:"discount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (ORDER, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.ShippingAddress, arg.Discount)
	var i ORDER
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderAt,
		&i.Status,
		&i.Discount,
		&i.ShippingAddress,
	)
	return i, err
}

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO
    "ORDER_DETAILS" (
        order_id,
        book_id,
        quantity,
        unit_price
    )
VALUES
    ($1, $2, $3, $4) RETURNING order_id, book_id, quantity, unit_price, created_at
`

type CreateOrderDetailParams struct {
	OrderID   uuid.UUID `json:"order_id"`
	BookID    string    `json:"book_id"`
	Quantity  int32     `json:"quantity"`
	UnitPrice float64   `json:"unit_price"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (ORDERDETAIL, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetail,
		arg.OrderID,
		arg.BookID,
		arg.Quantity,
		arg.UnitPrice,
	)
	var i ORDERDETAIL
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT
    o.order_id, o.user_id, o.order_at, o.status, o.discount, o.shipping_address,  CAST((SUM(OD.quantity * OD.unit_price) * COALESCE(D.discount_value, 1)) AS FLOAT) AS total_amount
FROM
    "ORDERS" AS O LEFT JOIN "ORDER_DETAILS" AS OD 
    ON O.order_id = OD.order_id
    LEFT JOIN "DISCOUNTS" AS D
    ON O.discount = D.discount_id
WHERE O.order_id = $1
GROUP BY
    O.order_id, D.discount_value
`

type GetOrderRow struct {
	OrderID         uuid.UUID     `json:"order_id"`
	UserID          string        `json:"user_id"`
	OrderAt         time.Time     `json:"order_at"`
	Status          string        `json:"status"`
	Discount        uuid.NullUUID `json:"discount"`
	ShippingAddress string        `json:"shipping_address"`
	TotalAmount     float64       `json:"total_amount"`
}

func (q *Queries) GetOrder(ctx context.Context, orderID uuid.UUID) (GetOrderRow, error) {
	row := q.db.QueryRowContext(ctx, getOrder, orderID)
	var i GetOrderRow
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderAt,
		&i.Status,
		&i.Discount,
		&i.ShippingAddress,
		&i.TotalAmount,
	)
	return i, err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT
    order_id, book_id, quantity, unit_price, created_at
FROM
    "ORDER_DETAILS"
WHERE order_id = $1 and book_id = $2
`

type GetOrderDetailParams struct {
	OrderID uuid.UUID `json:"order_id"`
	BookID  string    `json:"book_id"`
}

func (q *Queries) GetOrderDetail(ctx context.Context, arg GetOrderDetailParams) (ORDERDETAIL, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, arg.OrderID, arg.BookID)
	var i ORDERDETAIL
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT
    order_id, book_id, quantity, unit_price, created_at
FROM
    "ORDER_DETAILS"
WHERE order_id = $1
LIMIT $2 OFFSET $3
`

type ListOrderDetailsParams struct {
	OrderID uuid.UUID `json:"order_id"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

func (q *Queries) ListOrderDetails(ctx context.Context, arg ListOrderDetailsParams) ([]ORDERDETAIL, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ORDERDETAIL
	for rows.Next() {
		var i ORDERDETAIL
		if err := rows.Scan(
			&i.OrderID,
			&i.BookID,
			&i.Quantity,
			&i.UnitPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT
    o.order_id, o.user_id, o.order_at, o.status, o.discount, o.shipping_address,  CAST((SUM(OD.quantity * OD.unit_price) * COALESCE(D.discount_value, 1)) AS FLOAT) AS total_amount
FROM
    "ORDERS" AS O LEFT JOIN "ORDER_DETAILS" AS OD 
    ON O.order_id = OD.order_id
    LEFT JOIN "DISCOUNTS" AS D
    ON O.discount = D.discount_id
WHERE user_id = $1
GROUP BY
    O.order_id, D.discount_value
LIMIT $2 OFFSET $3
`

type ListOrdersParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type ListOrdersRow struct {
	OrderID         uuid.UUID     `json:"order_id"`
	UserID          string        `json:"user_id"`
	OrderAt         time.Time     `json:"order_at"`
	Status          string        `json:"status"`
	Discount        uuid.NullUUID `json:"discount"`
	ShippingAddress string        `json:"shipping_address"`
	TotalAmount     float64       `json:"total_amount"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]ListOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersRow
	for rows.Next() {
		var i ListOrdersRow
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderAt,
			&i.Status,
			&i.Discount,
			&i.ShippingAddress,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
