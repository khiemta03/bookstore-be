// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO
    "ORDERS" (
        order_id,
        user_id,
        total_amount,
        shipping_address,
        discount
    )
VALUES
    ($1, $2, $3, $4, $5) RETURNING order_id, user_id, order_at, status, discount, total_amount, shipping_address
`

type CreateOrderParams struct {
	OrderID         uuid.UUID     `json:"order_id"`
	UserID          string        `json:"user_id"`
	TotalAmount     float64       `json:"total_amount"`
	ShippingAddress string        `json:"shipping_address"`
	Discount        uuid.NullUUID `json:"discount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (ORDER, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.OrderID,
		arg.UserID,
		arg.TotalAmount,
		arg.ShippingAddress,
		arg.Discount,
	)
	var i ORDER
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderAt,
		&i.Status,
		&i.Discount,
		&i.TotalAmount,
		&i.ShippingAddress,
	)
	return i, err
}

const createOrderDetail = `-- name: CreateOrderDetail :one
INSERT INTO
    "ORDER_DETAILS" (
        order_id,
        book_id,
        quantity,
        unit_price
    )
VALUES
    ($1, $2, $3, $4) RETURNING order_id, book_id, quantity, unit_price, created_at
`

type CreateOrderDetailParams struct {
	OrderID   uuid.UUID `json:"order_id"`
	BookID    string    `json:"book_id"`
	Quantity  int32     `json:"quantity"`
	UnitPrice float64   `json:"unit_price"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (ORDERDETAIL, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetail,
		arg.OrderID,
		arg.BookID,
		arg.Quantity,
		arg.UnitPrice,
	)
	var i ORDERDETAIL
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT
    order_id, user_id, order_at, status, discount, total_amount, shipping_address
FROM
    "ORDERS"
WHERE order_id = $1
`

func (q *Queries) GetOrder(ctx context.Context, orderID uuid.UUID) (ORDER, error) {
	row := q.db.QueryRowContext(ctx, getOrder, orderID)
	var i ORDER
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderAt,
		&i.Status,
		&i.Discount,
		&i.TotalAmount,
		&i.ShippingAddress,
	)
	return i, err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT
    order_id, book_id, quantity, unit_price, created_at
FROM
    "ORDER_DETAILS"
WHERE order_id = $1 and book_id = $2
`

type GetOrderDetailParams struct {
	OrderID uuid.UUID `json:"order_id"`
	BookID  string    `json:"book_id"`
}

func (q *Queries) GetOrderDetail(ctx context.Context, arg GetOrderDetailParams) (ORDERDETAIL, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, arg.OrderID, arg.BookID)
	var i ORDERDETAIL
	err := row.Scan(
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT
    order_id, book_id, quantity, unit_price, created_at
FROM
    "ORDER_DETAILS"
WHERE order_id = $1
LIMIT $2 OFFSET $3
`

type ListOrderDetailsParams struct {
	OrderID uuid.UUID `json:"order_id"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

func (q *Queries) ListOrderDetails(ctx context.Context, arg ListOrderDetailsParams) ([]ORDERDETAIL, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ORDERDETAIL
	for rows.Next() {
		var i ORDERDETAIL
		if err := rows.Scan(
			&i.OrderID,
			&i.BookID,
			&i.Quantity,
			&i.UnitPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT
    order_id, user_id, order_at, status, discount, total_amount, shipping_address
FROM
    "ORDERS"
LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]ORDER, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ORDER
	for rows.Next() {
		var i ORDER
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderAt,
			&i.Status,
			&i.Discount,
			&i.TotalAmount,
			&i.ShippingAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByUser = `-- name: ListOrdersByUser :one
SELECT
    order_id, user_id, order_at, status, discount, total_amount, shipping_address
FROM
    "ORDERS"
WHERE user_id = $1
LIMIT $2 OFFSET $3
`

type ListOrdersByUserParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListOrdersByUser(ctx context.Context, arg ListOrdersByUserParams) (ORDER, error) {
	row := q.db.QueryRowContext(ctx, listOrdersByUser, arg.UserID, arg.Limit, arg.Offset)
	var i ORDER
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.OrderAt,
		&i.Status,
		&i.Discount,
		&i.TotalAmount,
		&i.ShippingAddress,
	)
	return i, err
}
