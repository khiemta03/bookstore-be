// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: shopping_cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createShoppingCartItem = `-- name: CreateShoppingCartItem :one
INSERT INTO
    "SHOPPING_CART_ITEMS" (
        user_id,
        book_id,
        quantity,
        unit_price
    )
VALUES
    ($1, $2, $3, $4) RETURNING cart_item_id, user_id, book_id, quantity, unit_price, status, added_at
`

type CreateShoppingCartItemParams struct {
	UserID    string  `json:"user_id"`
	BookID    string  `json:"book_id"`
	Quantity  int32   `json:"quantity"`
	UnitPrice float64 `json:"unit_price"`
}

func (q *Queries) CreateShoppingCartItem(ctx context.Context, arg CreateShoppingCartItemParams) (SHOPPINGCARTITEM, error) {
	row := q.db.QueryRowContext(ctx, createShoppingCartItem,
		arg.UserID,
		arg.BookID,
		arg.Quantity,
		arg.UnitPrice,
	)
	var i SHOPPINGCARTITEM
	err := row.Scan(
		&i.CartItemID,
		&i.UserID,
		&i.BookID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Status,
		&i.AddedAt,
	)
	return i, err
}

const getShoppingCartItem = `-- name: GetShoppingCartItem :one
SELECT
    cart_item_id, user_id, book_id, quantity, unit_price, status, added_at
FROM
    "SHOPPING_CART_ITEMS"
WHERE cart_item_id = $1
`

func (q *Queries) GetShoppingCartItem(ctx context.Context, cartItemID uuid.UUID) (SHOPPINGCARTITEM, error) {
	row := q.db.QueryRowContext(ctx, getShoppingCartItem, cartItemID)
	var i SHOPPINGCARTITEM
	err := row.Scan(
		&i.CartItemID,
		&i.UserID,
		&i.BookID,
		&i.Quantity,
		&i.UnitPrice,
		&i.Status,
		&i.AddedAt,
	)
	return i, err
}

const listShoppingCartItemsByUser = `-- name: ListShoppingCartItemsByUser :many
SELECT
    cart_item_id, user_id, book_id, quantity, unit_price, status, added_at
FROM
    "SHOPPING_CART_ITEMS"
WHERE user_id = $1
LIMIT $1 OFFSET $2
`

type ListShoppingCartItemsByUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShoppingCartItemsByUser(ctx context.Context, arg ListShoppingCartItemsByUserParams) ([]SHOPPINGCARTITEM, error) {
	rows, err := q.db.QueryContext(ctx, listShoppingCartItemsByUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SHOPPINGCARTITEM
	for rows.Next() {
		var i SHOPPINGCARTITEM
		if err := rows.Scan(
			&i.CartItemID,
			&i.UserID,
			&i.BookID,
			&i.Quantity,
			&i.UnitPrice,
			&i.Status,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
