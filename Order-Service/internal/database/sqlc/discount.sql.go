// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: discount.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addNewDiscount = `-- name: AddNewDiscount :one
INSERT INTO
    "DISCOUNTS" (
        discount_code,
        discount_value,
        start_date,
        end_date
    )
VALUES
    ($1, $2, $3, $4) RETURNING discount_id, discount_code, discount_value, start_date, end_date, created_at
`

type AddNewDiscountParams struct {
	DiscountCode  string    `json:"discount_code"`
	DiscountValue float64   `json:"discount_value"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
}

func (q *Queries) AddNewDiscount(ctx context.Context, arg AddNewDiscountParams) (DISCOUNT, error) {
	row := q.db.QueryRowContext(ctx, addNewDiscount,
		arg.DiscountCode,
		arg.DiscountValue,
		arg.StartDate,
		arg.EndDate,
	)
	var i DISCOUNT
	err := row.Scan(
		&i.DiscountID,
		&i.DiscountCode,
		&i.DiscountValue,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const getDiscount = `-- name: GetDiscount :one
SELECT
    discount_id, discount_code, discount_value, start_date, end_date, created_at
FROM
    "DISCOUNTS"
WHERE
    discount_id = $1
    AND start_date <= NOW()
    AND end_date >= NOW()
`

func (q *Queries) GetDiscount(ctx context.Context, discountID uuid.UUID) (DISCOUNT, error) {
	row := q.db.QueryRowContext(ctx, getDiscount, discountID)
	var i DISCOUNT
	err := row.Scan(
		&i.DiscountID,
		&i.DiscountCode,
		&i.DiscountValue,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
	)
	return i, err
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT
    discount_id, discount_code, discount_value, start_date, end_date, created_at
FROM
    "DISCOUNTS"
WHERE
    start_date <= NOW()
    AND end_date >= NOW()
LIMIT $1 OFFSET $2
`

type ListDiscountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDiscounts(ctx context.Context, arg ListDiscountsParams) ([]DISCOUNT, error) {
	rows, err := q.db.QueryContext(ctx, listDiscounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DISCOUNT
	for rows.Next() {
		var i DISCOUNT
		if err := rows.Scan(
			&i.DiscountID,
			&i.DiscountCode,
			&i.DiscountValue,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
